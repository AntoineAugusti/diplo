@startuml
interface Diplo.Parties.PartiesRepository {
    +rejoindre(id : int) : Diplo.Joueurs.Joueur
    +trouverParId(id : int) : Partie
}
class Diplo.Parties.Partie {
    +{static}ATTENTE_JOUEURS = "attente_joueurs"
    +{static}COMBAT = "combat"
    +{static}EN_JEU = "en_jeu"
    +{static}FIN = "fin"
    +{static}NEGOCIATION = "negociation"
    #casts : array = ["integer", "integer", "integer", "integer", "integer"]
    #hidden : array = ["created_at", "updated_at", "date_prochaine_phase"]
    +armees() : Illuminate.Database.Eloquent.Relations.HasManyThrough
    +carte() : Illuminate.Database.Eloquent.Relations.Relation
    +estCombat() : bool
    +estDernierTour() : bool
    +estEnAttente() : bool
    +estEnJeu() : bool
    +estNegociation() : bool
    +estPleine() : bool
    +estPremierTour() : bool
    +estTerminee() : bool
    +getArmees() : Armee[]
    +getCarte() : Diplo.Cartes.Carte
    +getDates() : array
    +getId() : int
    +getJoueurs() : Joueur[]
    +joueurs() : Illuminate.Database.Eloquent.Relations.Relation
    +manqueUnJoueur() : bool
    +{static}phasesPossibles() : array
    +setPhaseAttribute(value : string)
    +{static}statutsPossibles() : array
}
class Diplo.Parties.Partie extends Illuminate.Database.Eloquent.Model
class Diplo.Parties.Partie implements Diplo.Phases.PhaseInterface
class Diplo.Parties.EloquentPartiesRepository {
    -event : Event
    -joueurGenerator : Diplo.Joueurs.JoueurGeneratorInterface
    +rejoindre(id : int) : Diplo.Joueurs.Joueur
    +trouverParId(id : int) : Partie
    +__construct(joueurGenerator : Diplo.Joueurs.JoueurGeneratorInterface, event : Illuminate.Events.Dispatcher)
}
class Diplo.Parties.EloquentPartiesRepository implements Diplo.Parties.PartiesRepository
@enduml
