@startuml

' Utilisez http://www.planttext.com/planttext pour compiler

skinparam shadowing false


class Moteur {
    - partie : Partie
    - nbJoueursMin : Integer
    - fileDAttente : List<Joueur>
    - cartes : Carte
    --
    + lancerPartie(partie Partie, carte Carte, joueurs List<Joueur>): void
    + ajouterJoueur(Joueur j): void
    + supprimerJoueur(Joueur j): void 
    + setCarte(carte Carte): void
    + creerPartie(nbJoueursMin Integer, carte Carte, joueurs List<Joueur>)
}

class Partie {
    - carte : Carte
    - joueurs : List<Joueur>
    - nbTours : Integer
    - tourCourant : Tour
    --
    + ajouterJoueur(Joueur j): void
    + supprimerJoueur(Joueur j): void
    + getJoueurs(): List<Joueur>
    + getNbPointsDInteretsParJoueur(Joueur j): Integer
    + getPointsDInteretsParJoueur(Joueur j): List<PointDInteret>
    + tourEstAutomne(): Boolean
    + tourEstPrintemps(): Boolean
    + phaseEstNegociation(): Boolean
    + phaseEstCombat(): Boolean
}

package "cartes" <<Folder>> {
  interface CaseInterface
  abstract CaseAbstraite
  Carte "1" *- "0..n" CaseInterface
  CaseInterface <.. CaseAbstraite : use
  CaseAbstraite <|-- CaseMaritime
  CaseAbstraite <|-- CaseTerrestre
  CaseTerrestre <|-- CaseCotiere
  CaseInterface <.. PointDinteret

class Carte {
    - cases: List<CaseInterface>
    --
    + getNbPointsDInteretsParJoueur(Joueur j): Integer
    + getPointsDInteretsParJoueur(Joueur j): List<PointDInteret>
    + getNbCasesParJoueur(Joueur j): Integer
    + getCasesParJoueur(Joueur j): List<CaseInterface>
    + getNbPointsDInterets(): Integer
    + getNbCases(): Integer
    + getCases(): List<CaseInterface>
}

interface CaseInterface {
    + getNom(): String
    + getVoisins(): List<Case>
    + getArmee(): Armee
    + setArmee(Armee armee): void
    + getProprietaire(): Joueur
    + setProprietaire(Joueur joueur): void
    + estLibre(): Boolean
    + estMaritime(): Boolean
    + estCotiere: Boolean
    + estTerrestre(): Boolean
}

abstract class CaseAbstraite {
    - nom: String
    - armee: Armee
    - voisins: List<CaseInterface>
    - proprietaire: Joueur
    --
    + getNom(): String
    + getVoisins(): List<CaseInterface>
    + getArmee(): Armee
    + setArmee(Armee armee): void
    + getProprietaire(): Joueur
    + setProprietaire(Joueur joueur): void
    + estLibre(): Boolean
    + estMaritime(): Boolean
    + estCotiere: Boolean
    + estTerrestre(): Boolean
}

}

package "joueurs" <<Folder>> {
    class Joueur {
        - armees: List<Armee>
        - nom: String
        - partie: Partie
        --
        + ajouterArmee(Armee a): void
        + supprimerArmee(Armee a): void
        + getArmees(): List<Armee>
        + donnerOrdre(Armee a, Ordre o): void
        + getNom(): String
        + getPointsDInterets(): List<PointDInteret>
        + getNbPointsDInterets(): Integer
        + getCasesControlees(): List<CaseInterface>
        + rejoindrePartie(Partie p): void
        + quitterPartie(): void
    }
}

package "armees" <<Folder>> {
  Armee <|-- ArmeeMaritime
  Armee <|-- ArmeeTerrestre

    class Armee {
        - proprietaire: Joueur
        - case: CaseInterface
        - ordre: Ordre
        --
        + setProprietaire(Joueur j): void
        + getProprietaire(): Joueur
        + setCase(CaseInterface case): void
        + getCase(): CaseInterface
        + setOrdre(Ordre o): void
        + getOrdre(): Ordre
    }
}

package "tours" <<Folder>> {
  abstract Tour
  abstract Phase

  Tour <|-- TourPrimptemps
  Tour <|-- TourAutomne
  Tour "1" *- "2" Phase

  Phase <|-- PhaseNegociation
  Phase <|-- PhaseCombat

    class Tour {
        - type: String
        - phaseCourante: Phase 
        --
        + estAutomne(): Boolean
        + estPrintemps(): Boolean
        + phaseEstNegociation(): Boolean
        + phaseEstCombat(): Boolean
        + setPhase(Phase p): void
    }

    class Phase {
        - type: String
        --
        + estNegociation(): Boolean
        + estCombat(): Boolean
    }
}

package "ordres" <<Folder>> {
  abstract OrdreCible
  abstract Ordre

  Ordre <|-- OrdreCible
  Ordre <|-- Tenir

  OrdreCible <|-- SoutienOffensif
  OrdreCible <|-- SoutienDefensif
  OrdreCible <|-- Attaquer

    class Ordre {
        - joueur: Joueur
        --
        + setJoueur(Joueur j): Joueur
        + getJoueur(): Joueur
    }

    class OrdreCible {
        - caseCible: CaseInterface
        + getCase(): CaseInterface
        + setCase(CaseInterface c): void
        + estAttaque(): Boolean
        + estSoutienOffensif(): Boolean
        + estSoutienDefensif(): Boolean
    }
}

package "exceptions" <<Folder>> {
  DiploException <|-- OrdreException
  OrdreException <|-- AttaqueImpossibleException
  OrdreException <|-- SoutienImpossibleException
  SoutienImpossibleException <|-- SoutienCaseNonAdjacenteException
  SoutienImpossibleException <|-- SoutienCaseNonPraticableException
  
  AttaqueImpossibleException <|-- AttaqueCaseNonAdjacenteException
  AttaqueImpossibleException <|-- AttaqueCaseNonPraticableException
  AttaqueImpossibleException <|-- AttaquePersonnelleException
}


Joueur "1" *--o "n" Armee
Partie "1" *-- "0..n" Tour
Partie "1" o-- "0..n" Joueur
Partie "1" o-- "1" Carte

Moteur *-- "1" Partie
Moteur o-- "1" Carte
Moteur o-- "n" Joueur



@enduml
